{
  "contractName": "erc1155",
  "abi": [
    {
      "name": "TransferSingle",
      "inputs": [
        {
          "type": "address",
          "name": "_operator",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_id",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "TransferBatch",
      "inputs": [
        {
          "type": "address",
          "name": "_operator",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256[10]",
          "name": "_ids",
          "indexed": false
        },
        {
          "type": "uint256[10]",
          "name": "_values",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "ApprovalForAll",
      "inputs": [
        {
          "type": "address",
          "name": "_owner",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_operator",
          "indexed": true
        },
        {
          "type": "bool",
          "name": "_approved",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "URI",
      "inputs": [
        {
          "type": "string",
          "name": "_value",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "_id",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "constructor"
    },
    {
      "name": "getAddress",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_addr"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 370
    },
    {
      "name": "getHash",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        },
        {
          "type": "uint256[10]",
          "name": "_from_supplies"
        },
        {
          "type": "uint256[10]",
          "name": "_to_supplies"
        },
        {
          "type": "uint256",
          "name": "_value_eth"
        },
        {
          "type": "uint256",
          "name": "_nonce"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 11446
    },
    {
      "name": "getSingleHash",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "uint256",
          "name": "_from_supply"
        },
        {
          "type": "uint256",
          "name": "_to_supply"
        },
        {
          "type": "uint256",
          "name": "_value_eth"
        },
        {
          "type": "uint256",
          "name": "_nonce"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2041
    },
    {
      "name": "supportsInterface",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "bytes32",
          "name": "_interfaceID"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 868
    },
    {
      "name": "is_nonce_used",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        },
        {
          "type": "uint256",
          "name": "nonce"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1052
    },
    {
      "name": "is_token_id_exists",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "token_id"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 928
    },
    {
      "name": "safeTransferFrom",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "uint256",
          "name": "_value"
        },
        {
          "type": "bytes",
          "name": "_data"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 80803
    },
    {
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        },
        {
          "type": "uint256[10]",
          "name": "_values"
        },
        {
          "type": "bytes",
          "name": "_data"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 748184
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "uint256",
          "name": "_id"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1172
    },
    {
      "name": "balanceOfBatch",
      "outputs": [
        {
          "type": "uint256[10]",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address[10]",
          "name": "_owner"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 7524
    },
    {
      "name": "setApprovalForAll",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_operator"
        },
        {
          "type": "bool",
          "name": "_approved"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 38136
    },
    {
      "name": "isApprovedForAll",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "address",
          "name": "_operator"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1301
    },
    {
      "name": "createSingle",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_item_owner"
        },
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "string",
          "name": "_path"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 597461
    },
    {
      "name": "createBatch",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_items_owner"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 927926
    },
    {
      "name": "mint",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "uint256",
          "name": "_supply"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function"
    },
    {
      "name": "mint",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "uint256",
          "name": "_supply"
        },
        {
          "type": "bytes",
          "name": "_data"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function"
    },
    {
      "name": "mintBatch",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        },
        {
          "type": "uint256[10]",
          "name": "_supplies"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function"
    },
    {
      "name": "mintBatch",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        },
        {
          "type": "uint256[10]",
          "name": "_supplies"
        },
        {
          "type": "bytes",
          "name": "_data"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function"
    },
    {
      "name": "burn",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "uint256",
          "name": "_supply"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 40353
    },
    {
      "name": "burnBatch",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256[10]",
          "name": "_ids"
        },
        {
          "type": "uint256[10]",
          "name": "_supplies"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 382149
    },
    {
      "name": "tradeBatch",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        },
        {
          "type": "uint256[10]",
          "name": "_from_supplies"
        },
        {
          "type": "uint256[10]",
          "name": "_to_supplies"
        },
        {
          "type": "uint256",
          "name": "_value_eth"
        },
        {
          "type": "uint256",
          "name": "_nonce"
        },
        {
          "type": "bytes",
          "name": "_signature"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function"
    },
    {
      "name": "tradeBatch",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256[10]",
          "name": "_ids"
        },
        {
          "type": "uint256[10]",
          "name": "_from_supplies"
        },
        {
          "type": "uint256[10]",
          "name": "_to_supplies"
        },
        {
          "type": "uint256",
          "name": "_value_eth"
        },
        {
          "type": "uint256",
          "name": "_nonce"
        },
        {
          "type": "bytes",
          "name": "_signature"
        },
        {
          "type": "bytes",
          "name": "_data"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function"
    },
    {
      "name": "trade",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "uint256",
          "name": "_from_supply"
        },
        {
          "type": "uint256",
          "name": "_to_supply"
        },
        {
          "type": "uint256",
          "name": "_value_eth"
        },
        {
          "type": "uint256",
          "name": "_nonce"
        },
        {
          "type": "bytes",
          "name": "_signature"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function"
    },
    {
      "name": "trade",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_id"
        },
        {
          "type": "uint256",
          "name": "_from_supply"
        },
        {
          "type": "uint256",
          "name": "_to_supply"
        },
        {
          "type": "uint256",
          "name": "_value_eth"
        },
        {
          "type": "uint256",
          "name": "_nonce"
        },
        {
          "type": "bytes",
          "name": "_signature"
        },
        {
          "type": "bytes",
          "name": "_data"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function"
    },
    {
      "name": "owner",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1263
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052341561009857600080fd5b6000600155600160006301ffc9a760e05260c052604060c020556001600063d9b67a2660e05260c052604060c020553360025561405a56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263ae22c57d60005114156100d45734156100ac57600080fd5b60043560205181106100bd57600080fd5b50600435610140526101405160005260206000f350005b600015610313575b610580526101405261016052610180526101a0526101c0526101e05261020052610220526102405261026052610280526102a0526102c0526102e05261030052610320526103405261036052610380526103a0526103c0526103e05261040052610420526104405261046052610480526104a0526104c0526104e052610500526105205261054052610560526000610180516020826105c00101526020810190506102c0516020826105c0010152602081019050610400516020826105c0010152602081019050806105c0526105c090508051602082012090506105a0526106606000600a818352015b610660511515156102765760006105a05160208261068001015260208101905061018061066051600a81106101fa57600080fd5b60200201516020826106800101526020810190506102c061066051600a811061022257600080fd5b602002015160208261068001015260208101905061040061066051600a811061024a57600080fd5b6020020151602082610680010152602081019050806106805261068090508051602082012090506105a0525b5b81516001018083528114156101c6575b5050600061014051602082610760010152602081019050610160516020826107600101526020810190506105a0516020826107600101526020810190506105405160208261076001015260208101905061056051602082610760010152602081019050806107605261076090508051602082012090506107405261074051600052600051610580515650005b634a6f823360005114156105c457341561032c57600080fd5b600435602051811061033d57600080fd5b50602435602051811061034f57600080fd5b506000610120525b602061012051016101205261012061012051101561037457610357565b6000610120525b60206101205101610120526101206101205110156103985761037b565b6000610120525b60206101205101610120526101206101205110156103bc5761039f565b6373ad25716101405260043561016052602435610180526101a0604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506102e061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506104206102c480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506104043561056052610424356105805261058051610560516105405161052051610500516104e0516104c0516104a05161048051610460516104405161042051610400516103e0516103c0516103a05161038051610360516103405161032051610300516102e0516102c0516102a05161028051610260516102405161022051610200516101e0516101c0516101a0516101805161016051600658016100dc565b6105e0526105e05160005260206000f350005b600015610909575b610580526101405261016052610180526101a0526101c0526101e05261020052610220526102405261026052610280526102a0526102c0526102e05261030052610320526103405261036052610380526103a0526103c0526103e05261040052610420526104405261046052610480526104a0526104c0526104e052610500526105205261054052610560526000610140516020826105c0010152602081019050610160516020826105c0010152602081019050610180516020826105c00101526020810190506101a0516020826105c00101526020810190506101c0516020826105c00101526020810190506101e0516020826105c0010152602081019050610200516020826105c0010152602081019050610220516020826105c0010152602081019050610240516020826105c0010152602081019050610260516020826105c0010152602081019050610280516020826105c00101526020810190506102a0516020826105c00101526020810190506102c0516020826105c00101526020810190506102e0516020826105c0010152602081019050610300516020826105c0010152602081019050610320516020826105c0010152602081019050610340516020826105c0010152602081019050610360516020826105c0010152602081019050610380516020826105c00101526020810190506103a0516020826105c00101526020810190506103c0516020826105c00101526020810190506103e0516020826105c0010152602081019050610400516020826105c0010152602081019050610420516020826105c0010152602081019050610440516020826105c0010152602081019050610460516020826105c0010152602081019050610480516020826105c00101526020810190506104a0516020826105c00101526020810190506104c0516020826105c00101526020810190506104e0516020826105c0010152602081019050610500516020826105c0010152602081019050610520516020826105c0010152602081019050610540516020826105c0010152602081019050610560516020826105c0010152602081019050806105c0526105c090508051602082012090506105a0526105a051600052600051610580515650005b6000156109e1575b610220526101405261016052610180526101a0526101c0526101e0526102005260006101405160208261026001015260208101905061016051602082610260010152602081019050610180516020826102600101526020810190506101a0516020826102600101526020810190506101c0516020826102600101526020810190506101e05160208261026001015260208101905061020051602082610260010152602081019050806102605261026090508051602082012090506102405261024051600052600051610220515650005b6310660e866000511415610a905734156109fa57600080fd5b6004356020518110610a0b57600080fd5b506024356020518110610a1d57600080fd5b5063155960636101405260043561016052602435610180526044356101a0526064356101c0526084356101e05260a4356102005260c4356102205261022051610200516101e0516101c0516101a051610180516101605160065801610911565b610280526102805160005260206000f350005b600015610cf2575b6101805261014052610160526101a0526000610240525b6101a05160206001820306601f820103905061024051101515610ad157610aea565b610240516101c001526102405160200161024052610aaf565b60005060416101a0511815610b0757600060005260005161018051565b6101a0602060006020835103811315610b1f57600080fd5b046020026020018101519050610280526101a0602060206020835103811315610b4757600080fd5b0460200260200181015190506102a05260406001602082066103a0016101a0518284011115610b7557600080fd5b6041806103c0826020602088068803016101a001600060046018f1505081815280905090509050806020015160008251806020901315610bb457600080fd5b8091901215610bc257600080fd5b606051816020036101000a830480604051901315610bdf57600080fd5b8091901215610bed57600080fd5b9050905090506102c052601b6102c0511215610c30576102c0606051601b82510180604051901315610c1e57600080fd5b8091901215610c2c57600080fd5b8152505b610480601b8152601c81602001525060006104605261046061012060006002818352015b6101205160200261048001516102c0511415610c735760018352610c84565b5b8151600101808352811415610c54575b5050506104605160011415610ce257610140516104c0526102c0516000811215610cad57600080fd5b6104e05261028051610500526102a05161052052602060c060806104c060006001610bb8f15060c05160005260005161018051565b6000600052600051610180515650005b600015610db3575b6101605261014052610140517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff806000811215610d3e578060000360020a8204610d45565b8060020a82025b90509050604051811115610d5857600080fd5b61018052700100000000000000000000000000000000610d7757600080fd5b7001000000000000000000000000000000006101405106604051811115610d9d57600080fd5b6101a05261018051600052600051610160515650005b63f17535506000511415610de8573415610dcc57600080fd5b600060043560e05260c052604060c0205460005260206000f350005b63ac2a2e216000511415610e3d573415610e0157600080fd5b6004356020518110610e1257600080fd5b50600460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b634026b7556000511415610e72573415610e5657600080fd5b600760043560e05260c052604060c0205460005260206000f350005b63f242432a6000511415611135573415610e8b57600080fd5b6004356020518110610e9c57600080fd5b506024356020518110610eae57600080fd5b5061012060843560040161014037610100608435600401351115610ed157600080fd5b600660043560e05260c052604060c0203360e05260c052604060c02054336004351417610efd57600080fd5b6308c379a06102805260206102a05260206102c0527f43616e6e6f74207472616e7366657220746f207a65726f20616464726573732e6102e0526102c050600060243518610f4c57608461029cfd5b6308c379a0610320526020610340526012610360527f4e6f7420656e6f75676820746f6b656e732e00000000000000000000000000006103805261036050606435600360043560e05260c052604060c02060443560e05260c052604060c020541015610fb957608461033cfd5b600360043560e05260c052604060c02060443560e05260c052604060c02060643581541015610fe757600080fd5b606435815403815550600360243560e05260c052604060c02060443560e05260c052604060c0208054606435825401101561102157600080fd5b6064358154018155506044356103c0526064356103e052602435600435337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406103c0a460006024353b1115611133576024353b61107f57600080fd5b602435301861108d57600080fd5b60206106406101c460a063f23a6e6161042052336104405260043561046052604435610480526064356104a052806104c052610140808051602001808461044001828460006004600a8704601201f16110e557600080fd5b50508051820160206001820306601f820103905060200191505061043c905060006024355af161111457600080fd5b600050610640516104005263f23a6e61610400511461113257600080fd5b5b005b63cf36e535600051141561163c57341561114e57600080fd5b600435602051811061115f57600080fd5b50602435602051811061117157600080fd5b506000610120525b602061012051016101205261012061012051101561119657611179565b6000610120525b60206101205101610120526101206101205110156111ba5761119d565b6101206102c435600401610140376101006102c4356004013511156111de57600080fd5b600660043560e05260c052604060c0203360e05260c052604060c0205433600435141761120a57600080fd5b6308c379a06102805260206102a05260206102c0527f43616e6e6f74207472616e7366657220746f207a65726f20616464726573732e6102e0526102c05060006024351861125957608461029cfd5b6103206000600a818352015b604461032051600a811061127857600080fd5b60200201356103405261018461032051600a811061129557600080fd5b6020020135600360043560e05260c052604060c0206103405160e05260c052604060c0205410156112c557600080fd5b5b8151600101808352811415611265575b505060443561036052606435610380526084356103a05260a4356103c05260c4356103e05260e435610400526101043561042052610124356104405261014435610460526101643561048052610184356104a0526101a4356104c0526101c4356104e0526101e435610500526102043561052052610224356105405261024435610560526102643561058052610284356105a0526102a4356105c052602435600435337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610360a46105e06000600a818352015b60446105e051600a81106113c057600080fd5b602002013561060052600360043560e05260c052604060c0206106005160e05260c052604060c0206101846105e051600a81106113fc57600080fd5b60200201358154101561140e57600080fd5b6101846105e051600a811061142257600080fd5b6020020135815403815550600360243560e05260c052604060c0206106005160e05260c052604060c02080546101846105e051600a811061146257600080fd5b6020020135825401101561147557600080fd5b6101846105e051600a811061148957600080fd5b60200201358154018155505b81516001018083528114156113ad575b505060006024353b111561163a576024353b6114c057600080fd5b60243530186114ce57600080fd5b6020610aa06104046102e063a3bfc206610640523361066052600435610680526106a0604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506107e061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250508061092052610140808051602001808461066001828460006004600a8704601201f16115ec57600080fd5b50508051820160206001820306601f820103905060200191505061065c905060006024355af161161b57600080fd5b600050610aa0516106205263e324a00d610620511461163957600080fd5b5b005b62fdd58e600051141561169057341561165457600080fd5b600435602051811061166557600080fd5b50600360043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63fbe31aea60005114156117935734156116a957600080fd5b6000610120525b610120516004013560205181106116c657600080fd5b5060206101205101610120526101206101205110156116e4576116b0565b6000610120525b6020610120510161012052610120610120511015611708576116eb565b6102806000600a818352015b6003600461028051600a811061172957600080fd5b602002013560e05260c052604060c02061014461028051600a811061174d57600080fd5b602002013560e05260c052604060c0205461014061028051600a811061177257600080fd5b60200201525b8151600101808352811415611714575b5050610140610140f3005b63a22cb46560005114156118235734156117ac57600080fd5b60043560205181106117bd57600080fd5b50602435600281106117ce57600080fd5b5060243560063360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c316020610140a3005b63e985e9c5600051141561188a57341561183c57600080fd5b600435602051811061184d57600080fd5b50602435602051811061185f57600080fd5b50600660043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a70b070f6000511415611af85734156118a357600080fd5b60043560205181106118b457600080fd5b50610120604435600401610140376101006044356004013511156118d757600080fd5b6000600435186118e657600080fd5b6308c379a06102805260206102a052601b6102c0527f4f776e6572206f6e6c792063616e20637265617465206974656d2e00000000006102e0526102c050336002541461193457608461029cfd5b6000600360043560e05260c052604060c02060243560e05260c052604060c02055600180546001825401101561196957600080fd5b60018154018155506001600760243560e05260c052604060c0205561014080600560243560e05260c052604060c02060c052602060c020602082510161012060006009818352015b826101205160200211156119c4576119e6565b61012051602002850151610120518501555b81516001018083528114156119b1575b50505050505060206103405261034051610380526101408051602001806103405161038001828460006004600a8704601201f1611a2257600080fd5b5050610320610340516103800151610440818352015b610440610320511115611a4a57611a6b565b600061032051610340516103a00101535b8151600101808352811415611a38575b5050602061034051610380015160206001820306601f8201039050610340510101610340526024357f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61034051610380a26024356103a05260006103c0526004356000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406103a0a4005b6319a35d7c6000511415611d43573415611b1157600080fd5b6004356020518110611b2257600080fd5b506000610120525b6020610120510161012052610120610120511015611b4757611b2a565b600060043518611b5657600080fd5b6308c379a061014052602061016052601c610180527f4f776e6572206f6e6c792063616e20637265617465206974656d732e000000006101a052610180503360025414611ba457608461015cfd5b6101e06000600a818352015b60246101e051600a8110611bc357600080fd5b6020020135610200526000600360043560e05260c052604060c0206102005160e05260c052604060c020556001805460018254011015611c0257600080fd5b6001815401815550600160076102005160e05260c052604060c020555b8151600101808352811415611bb0575b5050610220600081526000816020015260008160400152600081606001526000816080015260008160a0015260008160c0015260008160e00152600081610100015260008161012001525060243561036052604435610380526064356103a0526084356103c05260a4356103e05260c4356104005260e43561042052610104356104405261012435610460526101443561048052610220516104a052610240516104c052610260516104e05261028051610500526102a051610520526102c051610540526102e051610560526103005161058052610320516105a052610340516105c0526004356000337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610360a4005b63156e29f66000511415611d8157600061028052610280805160200180610140828460006004600a8704601201f1611d7a57600080fd5b5050611dce565b63731133e96000511415611dc65761012060643560040161014037610100606435600401351115611db157600080fd5b61014060643560040161014037600050611dce565b60001561208a575b3415611dd957600080fd5b6004356020518110611dea57600080fd5b50600060043518611dfa57600080fd5b6308c379a06102c05260206102e052601a610300527f4f776e6572206f6e6c792063616e206d696e74206974656d732e00000000000061032052610300503360025414611e485760846102dcfd5b610140610380525b61038051516020610380510161038052610380610380511015611e7257611e50565b6320171bef6103a0526024356103c0526103c05160065801610cfa565b61042052610360610380525b6103805152602061038051036103805261014061038051101515611ebe57611e9b565b6104205161036052600261036051146001610360511417611ede57600080fd5b6001610360511415611f5f576308c379a0610440526020610460526028610480527f43616e6e6f74206d696e74204e46542077697468205f737570706c79206d6f726104a0527f65207468616e20310000000000000000000000000000000000000000000000006104c05261048050600160443514611f5e5760a461045cfd5b5b604435600360043560e05260c052604060c02060243560e05260c052604060c0205560243561050052604435610520526004356000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f626040610500a460006004353b1115612088576004353b611fd557600080fd5b6004353018611fe357600080fd5b60206107806101c460a063f23a6e6161056052336105805260006105a0526024356105c0526044356105e0528061060052610140808051602001808461058001828460006004600a8704601201f161203a57600080fd5b50508051820160206001820306601f820103905060200191505061057c905060006004355af161206957600080fd5b600050610780516105405263f23a6e61610540511461208757600080fd5b5b005b63c671854d60005114156120c857600061028052610280805160200180610140828460006004600a8704601201f16120c157600080fd5b5050612118565b63b07e58756000511415612110576101206102a435600401610140376101006102a4356004013511156120fa57600080fd5b6101406102a43560040161014037600050612118565b6000156124f6575b341561212357600080fd5b600435602051811061213457600080fd5b506000610120525b60206101205101610120526101206101205110156121595761213c565b6000610120525b602061012051016101205261012061012051101561217d57612160565b60006004351861218c57600080fd5b6308c379a06102c05260206102e052601a610300527f4f776e6572206f6e6c792063616e206d696e74206974656d732e000000000000610320526103005033600254146121da5760846102dcfd5b6103606000600a818352015b602461036051600a81106121f957600080fd5b6020020135610380526101406103c0525b6103c0515160206103c051016103c0526103c06103c051101561222c5761220a565b6320171bef6103e05261038051610400526104005160065801610cfa565b610460526103a06103c0525b6103c0515260206103c051036103c0526101406103c05110151561227957612256565b610460516103a05260026103a0511460016103a051141761229957600080fd5b60016103a05114156122cb57600161016461036051600a81106122bb57600080fd5b6020020135146122ca57600080fd5b5b61016461036051600a81106122df57600080fd5b6020020135600360043560e05260c052604060c0206103805160e05260c052604060c020555b81516001018083528114156121e6575b5050602435610480526044356104a0526064356104c0526084356104e05260a4356105005260c4356105205260e4356105405261010435610560526101243561058052610144356105a052610164356105c052610184356105e0526101a435610600526101c435610620526101e4356106405261020435610660526102243561068052610244356106a052610264356106c052610284356106e0526004356000337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610480a46107006000600a818352015b60006004353b11156124e1576004353b61240357600080fd5b600435301861241157600080fd5b60206109606101c460a063f23a6e61610740523361076052600061078052602461070051600a811061244257600080fd5b60200201356107a05261016461070051600a811061245f57600080fd5b60200201356107c052806107e052610140808051602001808461076001828460006004600a8704601201f161249357600080fd5b50508051820160206001820306601f820103905060200191505061075c905060006004355af16124c257600080fd5b600050610960516107205263f23a6e6161072051146124e057600080fd5b5b5b81516001018083528114156123ea575b5050005b63b390c0ab60005114156125ea57341561250f57600080fd5b6308c379a061014052602061016052601a610180527f4e6f7420656e6f75676820746f6b656e7320746f206275726e2e0000000000006101a0526101805060243560033360e05260c052604060c02060043560e05260c052604060c02054101561257a57608461015cfd5b60033360e05260c052604060c02060043560e05260c052604060c020602435815410156125a657600080fd5b6024358154038155506004356101e05260243561020052600033337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406101e0a4005b63b59afe52600051141561282b57341561260357600080fd5b6000610120525b60206101205101610120526101206101205110156126275761260a565b6000610120525b602061012051016101205261012061012051101561264b5761262e565b6101406000600a818352015b600461014051600a811061266a57600080fd5b60200201356101605261014461014051600a811061268757600080fd5b602002013560033360e05260c052604060c0206101605160e05260c052604060c0205410156126b557600080fd5b5b8151600101808352811415612657575b50506101806000600a818352015b600461018051600a81106126e757600080fd5b60200201356101a05260033360e05260c052604060c0206101a05160e05260c052604060c02061014461018051600a811061272157600080fd5b60200201358154101561273357600080fd5b61014461018051600a811061274757600080fd5b60200201358154038155505b81516001018083528114156126d4575b50506004356101c0526024356101e05260443561020052606435610220526084356102405260a4356102605260c4356102805260e4356102a052610104356102c052610124356102e0526101443561030052610164356103205261018435610340526101a435610360526101c435610380526101e4356103a052610204356103c052610224356103e05261024435610400526102643561042052600033337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa86102806101c0a4005b63f2526ada6000511415612869576000610320526103208051602001806101e0828460006004600a8704601201f161286257600080fd5b50506128b9565b63a835c36960005114156128b157610120610464356004016101e0376101006104643560040135111561289b57600080fd5b610140610464356004016101e0376000506128b9565b600015613725575b60043560205181106128ca57600080fd5b5060243560205181106128dc57600080fd5b506000610120525b6020610120510161012052610120610120511015612901576128e4565b6000610120525b602061012051016101205261012061012051101561292557612908565b6000610120525b60206101205101610120526101206101205110156129495761292c565b6061610444356004016101403760416104443560040135111561296b57600080fd5b6308c379a061036052602061038052602c6103a0527f5f66726f6d206d757374206265207468652073656e646572206f7220617070726103c0527f6f766564206164647265737300000000000000000000000000000000000000006103e0526103a050600660043560e05260c052604060c0203360e05260c052604060c020543360043514176129fc5760a461037cfd5b6308c379a0610420526020610440526025610460527f44657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d610480527f7a65726f2e0000000000000000000000000000000000000000000000000000006104a05261046050600060243518612a705760a461043cfd5b6308c379a06104e0526020610500526015610520527f4e6f6e6365206d75737420626520756e757365642e00000000000000000000006105405261052050600460043560e05260c052604060c0206104243560e05260c052604060c0205415612ada5760846104fcfd5b6308c379a06105805260206105a05260256105c0527f53656e64657220686173206e6f742070726f766964656420656e6f75676820656105e0527f746865722e000000000000000000000000000000000000000000000000000000610600526105c050346104043514612b4e5760a461059cfd5b6106406000600a818352015b604461064051600a8110612b6d57600080fd5b602002013561066052600061018461064051600a8110612b8c57600080fd5b60200201351115612c03576102c461064051600a8110612bab57600080fd5b602002013515612bba57600080fd5b61018461064051600a8110612bce57600080fd5b6020020135600360043560e05260c052604060c0206106605160e05260c052604060c020541015612bfe57600080fd5b612c6b565b61018461064051600a8110612c1757600080fd5b602002013515612c2657600080fd5b6102c461064051600a8110612c3a57600080fd5b6020020135600360243560e05260c052604060c0206106605160e05260c052604060c020541015612c6a57600080fd5b5b5b8151600101808352811415612b5a575b50506101406106a0525b6106a0515160206106a051016106a0526106a06106a0511015612ca857612c86565b6373ad25716106c0526004356106e05260243561070052610720604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505061086061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506109a06102c480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505061040435610ae05261042435610b0052610b0051610ae051610ac051610aa051610a8051610a6051610a4051610a2051610a00516109e0516109c0516109a05161098051610960516109405161092051610900516108e0516108c0516108a05161088051610860516108405161082051610800516107e0516107c0516107a05161078051610760516107405161072051610700516106e051600658016100dc565b610b60526106806106a0525b6106a0515260206106a051036106a0526101406106a051101515612ecc57612ea9565b610b605161068052610140610ba0525b610ba051516020610ba05101610ba052610ba0610ba0511015612efe57612edc565b6040636f868168610bc05261068051610be05280610c00526101408080516020018084610be001828460006004600a8704601201f1612f3c57600080fd5b50508051820160206001820306601f820103905060200191505050610c005180610be00180518060206001820306601f82010390508201610ce0525050505b610c20610ce0511015612f8d57612fa2565b610ce051516020610ce05103610ce052612f7b565b610c0051610be05160065801610a98565b610d0052610b80610ba0525b610ba051526020610ba05103610ba052610140610ba051101515612fe257612fbf565b610d0051610b80526308c379a0610d20526020610d40526020610d60527f5369676e657220646f6573206e6f74206d61746368207369676e61747572652e610d8052610d6050602435610b80511461303b576084610d3cfd5b600160043360e05260c052604060c0206104243560e05260c052604060c02055610dc06000600a818352015b6044610dc051600a811061307a57600080fd5b6020020135610de0526000610184610dc051600a811061309957600080fd5b6020020135111561317457600360043560e05260c052604060c020610de05160e05260c052604060c020610184610dc051600a81106130d757600080fd5b6020020135815410156130e957600080fd5b610184610dc051600a81106130fd57600080fd5b6020020135815403815550600360243560e05260c052604060c020610de05160e05260c052604060c0208054610184610dc051600a811061313d57600080fd5b6020020135825401101561315057600080fd5b610184610dc051600a811061316457600080fd5b6020020135815401815550613240565b600360043560e05260c052604060c020610de05160e05260c052604060c02080546102c4610dc051600a81106131a957600080fd5b602002013582540110156131bc57600080fd5b6102c4610dc051600a81106131d057600080fd5b6020020135815401815550600360243560e05260c052604060c020610de05160e05260c052604060c0206102c4610dc051600a811061320e57600080fd5b60200201358154101561322057600080fd5b6102c4610dc051600a811061323457600080fd5b60200201358154038155505b5b8151600101808352811415613067575b50506000600060006000346024356000f161326b57600080fd5b604435610e0052606435610e2052608435610e405260a435610e605260c435610e805260e435610ea05261010435610ec05261012435610ee05261014435610f005261016435610f205261018435610f40526101a435610f60526101c435610f80526101e435610fa05261020435610fc05261022435610fe0526102443561100052610264356110205261028435611040526102a43561106052602435600435337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610e00a4604435611080526064356110a0526084356110c05260a4356110e05260c4356111005260e43561112052610104356111405261012435611160526101443561118052610164356111a0526102c4356111c0526102e4356111e052610304356112005261032435611220526103443561124052610364356112605261038435611280526103a4356112a0526103c4356112c0526103e4356112e052600435602435337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280611080a460006024353b1115613590576024353b61341657600080fd5b602435301861342457600080fd5b60206117806104046102e063a3bfc20661132052336113405260243561136052611380604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506114c061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505080611600526101e0808051602001808461134001828460006004600a8704601201f161354257600080fd5b50508051820160206001820306601f820103905060200191505061133c905060006024355af161357157600080fd5b6000506117805161130052630c97e564611300511461358f57600080fd5b5b60006004353b1115613723576004353b6135a957600080fd5b60043530186135b757600080fd5b6020611c206104046102e063a3bfc2066117c052336117e05260043561180052611820604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506119606102c480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505080611aa0526101e080805160200180846117e001828460006004600a8704601201f16136d557600080fd5b50508051820160206001820306601f82010390506020019150506117dc905060006004355af161370457600080fd5b600050611c20516117a052630c97e5646117a0511461372257600080fd5b5b005b636e8205b26000511415613763576000610320526103208051602001806101e0828460006004600a8704601201f161375c57600080fd5b50506137b3565b63183f5ec560005114156137ab57610120610104356004016101e0376101006101043560040135111561379557600080fd5b610140610104356004016101e0376000506137b3565b600015613f5d575b60043560205181106137c457600080fd5b5060243560205181106137d657600080fd5b50606160e43560040161014037604160e4356004013511156137f757600080fd5b600660043560e05260c052604060c0203360e05260c052604060c0205433600435141761382357600080fd5b6308c379a06103605260206103805260256103a0527f44657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d6103c0527f7a65726f2e0000000000000000000000000000000000000000000000000000006103e0526103a0506000602435186138975760a461037cfd5b6308c379a0610420526020610440526015610460527f4e6f6e6365206d75737420626520756e757365642e00000000000000000000006104805261046050600460043560e05260c052604060c02060c43560e05260c052604060c020541561390057608461043cfd5b6308c379a06104c05260206104e0526025610500527f53656e64657220686173206e6f742070726f766964656420656e6f7567682065610520527f746865722e00000000000000000000000000000000000000000000000000000061054052610500503460a435146139735760a46104dcfd5b600060643511156139bd576084351561398b57600080fd5b606435600360043560e05260c052604060c02060443560e05260c052604060c0205410156139b857600080fd5b6139f8565b606435156139ca57600080fd5b608435600360243560e05260c052604060c02060443560e05260c052604060c0205410156139f757600080fd5b5b6101406105a0525b6105a0515160206105a051016105a0526105a06105a0511015613a2257613a00565b63155960636105c0526004356105e0526024356106005260443561062052606435610640526084356106605260a4356106805260c4356106a0526106a05161068051610660516106405161062051610600516105e05160065801610911565b610700526105806105a0525b6105a0515260206105a051036105a0526101406105a051101515613ab057613a8d565b6107005161058052610140610740525b61074051516020610740510161074052610740610740511015613ae257613ac0565b6040636f868168610760526105805161078052806107a052610140808051602001808461078001828460006004600a8704601201f1613b2057600080fd5b50508051820160206001820306601f8201039050602001915050506107a051806107800180518060206001820306601f82010390508201610880525050505b6107c0610880511015613b7157613b86565b61088051516020610880510361088052613b5f565b6107a0516107805160065801610a98565b6108a052610720610740525b6107405152602061074051036107405261014061074051101515613bc657613ba3565b6108a051610720526308c379a06108c05260206108e0526020610900527f5369676e657220646f6573206e6f74206d61746368207369676e61747572652e61092052610900506024356107205114613c1f5760846108dcfd5b600160043360e05260c052604060c02060c43560e05260c052604060c0205560006064351115613cbf57600360043560e05260c052604060c02060443560e05260c052604060c02060643581541015613c7757600080fd5b606435815403815550600360243560e05260c052604060c02060443560e05260c052604060c02080546064358254011015613cb157600080fd5b606435815401815550613d31565b600360043560e05260c052604060c02060443560e05260c052604060c02080546084358254011015613cf057600080fd5b608435815401815550600360243560e05260c052604060c02060443560e05260c052604060c02060843581541015613d2757600080fd5b6084358154038155505b6000600060006000346024356000f1613d4957600080fd5b6044356109605260643561098052602435600435337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f626040610960a46044356109a0526084356109c052600435602435337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406109a0a460006024353b1115613e8e576024353b613dda57600080fd5b6024353018613de857600080fd5b6020610c206101c460a063f23a6e61610a005233610a2052602435610a4052604435610a6052606435610a805280610aa0526101e08080516020018084610a2001828460006004600a8704601201f1613e4057600080fd5b50508051820160206001820306601f8201039050602001915050610a1c905060006024355af1613e6f57600080fd5b600050610c20516109e052630c97e5646109e05114613e8d57600080fd5b5b60006004353b1115613f5b576004353b613ea757600080fd5b6004353018613eb557600080fd5b6020610e806101c460a063f23a6e61610c605233610c8052600435610ca052604435610cc052608435610ce05280610d00526101e08080516020018084610c8001828460006004600a8704601201f1613f0d57600080fd5b50508051820160206001820306601f8201039050602001915050610c7c905060006004355af1613f3c57600080fd5b600050610e8051610c4052630c97e564610c405114613f5a57600080fd5b5b005b638da5cb5b6000511415613f84573415613f7657600080fd5b60025460005260206000f350005b60006000fd5b6100d061405a036100d06000396100d061405a036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263ae22c57d60005114156100d45734156100ac57600080fd5b60043560205181106100bd57600080fd5b50600435610140526101405160005260206000f350005b600015610313575b610580526101405261016052610180526101a0526101c0526101e05261020052610220526102405261026052610280526102a0526102c0526102e05261030052610320526103405261036052610380526103a0526103c0526103e05261040052610420526104405261046052610480526104a0526104c0526104e052610500526105205261054052610560526000610180516020826105c00101526020810190506102c0516020826105c0010152602081019050610400516020826105c0010152602081019050806105c0526105c090508051602082012090506105a0526106606000600a818352015b610660511515156102765760006105a05160208261068001015260208101905061018061066051600a81106101fa57600080fd5b60200201516020826106800101526020810190506102c061066051600a811061022257600080fd5b602002015160208261068001015260208101905061040061066051600a811061024a57600080fd5b6020020151602082610680010152602081019050806106805261068090508051602082012090506105a0525b5b81516001018083528114156101c6575b5050600061014051602082610760010152602081019050610160516020826107600101526020810190506105a0516020826107600101526020810190506105405160208261076001015260208101905061056051602082610760010152602081019050806107605261076090508051602082012090506107405261074051600052600051610580515650005b634a6f823360005114156105c457341561032c57600080fd5b600435602051811061033d57600080fd5b50602435602051811061034f57600080fd5b506000610120525b602061012051016101205261012061012051101561037457610357565b6000610120525b60206101205101610120526101206101205110156103985761037b565b6000610120525b60206101205101610120526101206101205110156103bc5761039f565b6373ad25716101405260043561016052602435610180526101a0604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506102e061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506104206102c480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506104043561056052610424356105805261058051610560516105405161052051610500516104e0516104c0516104a05161048051610460516104405161042051610400516103e0516103c0516103a05161038051610360516103405161032051610300516102e0516102c0516102a05161028051610260516102405161022051610200516101e0516101c0516101a0516101805161016051600658016100dc565b6105e0526105e05160005260206000f350005b600015610909575b610580526101405261016052610180526101a0526101c0526101e05261020052610220526102405261026052610280526102a0526102c0526102e05261030052610320526103405261036052610380526103a0526103c0526103e05261040052610420526104405261046052610480526104a0526104c0526104e052610500526105205261054052610560526000610140516020826105c0010152602081019050610160516020826105c0010152602081019050610180516020826105c00101526020810190506101a0516020826105c00101526020810190506101c0516020826105c00101526020810190506101e0516020826105c0010152602081019050610200516020826105c0010152602081019050610220516020826105c0010152602081019050610240516020826105c0010152602081019050610260516020826105c0010152602081019050610280516020826105c00101526020810190506102a0516020826105c00101526020810190506102c0516020826105c00101526020810190506102e0516020826105c0010152602081019050610300516020826105c0010152602081019050610320516020826105c0010152602081019050610340516020826105c0010152602081019050610360516020826105c0010152602081019050610380516020826105c00101526020810190506103a0516020826105c00101526020810190506103c0516020826105c00101526020810190506103e0516020826105c0010152602081019050610400516020826105c0010152602081019050610420516020826105c0010152602081019050610440516020826105c0010152602081019050610460516020826105c0010152602081019050610480516020826105c00101526020810190506104a0516020826105c00101526020810190506104c0516020826105c00101526020810190506104e0516020826105c0010152602081019050610500516020826105c0010152602081019050610520516020826105c0010152602081019050610540516020826105c0010152602081019050610560516020826105c0010152602081019050806105c0526105c090508051602082012090506105a0526105a051600052600051610580515650005b6000156109e1575b610220526101405261016052610180526101a0526101c0526101e0526102005260006101405160208261026001015260208101905061016051602082610260010152602081019050610180516020826102600101526020810190506101a0516020826102600101526020810190506101c0516020826102600101526020810190506101e05160208261026001015260208101905061020051602082610260010152602081019050806102605261026090508051602082012090506102405261024051600052600051610220515650005b6310660e866000511415610a905734156109fa57600080fd5b6004356020518110610a0b57600080fd5b506024356020518110610a1d57600080fd5b5063155960636101405260043561016052602435610180526044356101a0526064356101c0526084356101e05260a4356102005260c4356102205261022051610200516101e0516101c0516101a051610180516101605160065801610911565b610280526102805160005260206000f350005b600015610cf2575b6101805261014052610160526101a0526000610240525b6101a05160206001820306601f820103905061024051101515610ad157610aea565b610240516101c001526102405160200161024052610aaf565b60005060416101a0511815610b0757600060005260005161018051565b6101a0602060006020835103811315610b1f57600080fd5b046020026020018101519050610280526101a0602060206020835103811315610b4757600080fd5b0460200260200181015190506102a05260406001602082066103a0016101a0518284011115610b7557600080fd5b6041806103c0826020602088068803016101a001600060046018f1505081815280905090509050806020015160008251806020901315610bb457600080fd5b8091901215610bc257600080fd5b606051816020036101000a830480604051901315610bdf57600080fd5b8091901215610bed57600080fd5b9050905090506102c052601b6102c0511215610c30576102c0606051601b82510180604051901315610c1e57600080fd5b8091901215610c2c57600080fd5b8152505b610480601b8152601c81602001525060006104605261046061012060006002818352015b6101205160200261048001516102c0511415610c735760018352610c84565b5b8151600101808352811415610c54575b5050506104605160011415610ce257610140516104c0526102c0516000811215610cad57600080fd5b6104e05261028051610500526102a05161052052602060c060806104c060006001610bb8f15060c05160005260005161018051565b6000600052600051610180515650005b600015610db3575b6101605261014052610140517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff806000811215610d3e578060000360020a8204610d45565b8060020a82025b90509050604051811115610d5857600080fd5b61018052700100000000000000000000000000000000610d7757600080fd5b7001000000000000000000000000000000006101405106604051811115610d9d57600080fd5b6101a05261018051600052600051610160515650005b63f17535506000511415610de8573415610dcc57600080fd5b600060043560e05260c052604060c0205460005260206000f350005b63ac2a2e216000511415610e3d573415610e0157600080fd5b6004356020518110610e1257600080fd5b50600460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b634026b7556000511415610e72573415610e5657600080fd5b600760043560e05260c052604060c0205460005260206000f350005b63f242432a6000511415611135573415610e8b57600080fd5b6004356020518110610e9c57600080fd5b506024356020518110610eae57600080fd5b5061012060843560040161014037610100608435600401351115610ed157600080fd5b600660043560e05260c052604060c0203360e05260c052604060c02054336004351417610efd57600080fd5b6308c379a06102805260206102a05260206102c0527f43616e6e6f74207472616e7366657220746f207a65726f20616464726573732e6102e0526102c050600060243518610f4c57608461029cfd5b6308c379a0610320526020610340526012610360527f4e6f7420656e6f75676820746f6b656e732e00000000000000000000000000006103805261036050606435600360043560e05260c052604060c02060443560e05260c052604060c020541015610fb957608461033cfd5b600360043560e05260c052604060c02060443560e05260c052604060c02060643581541015610fe757600080fd5b606435815403815550600360243560e05260c052604060c02060443560e05260c052604060c0208054606435825401101561102157600080fd5b6064358154018155506044356103c0526064356103e052602435600435337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406103c0a460006024353b1115611133576024353b61107f57600080fd5b602435301861108d57600080fd5b60206106406101c460a063f23a6e6161042052336104405260043561046052604435610480526064356104a052806104c052610140808051602001808461044001828460006004600a8704601201f16110e557600080fd5b50508051820160206001820306601f820103905060200191505061043c905060006024355af161111457600080fd5b600050610640516104005263f23a6e61610400511461113257600080fd5b5b005b63cf36e535600051141561163c57341561114e57600080fd5b600435602051811061115f57600080fd5b50602435602051811061117157600080fd5b506000610120525b602061012051016101205261012061012051101561119657611179565b6000610120525b60206101205101610120526101206101205110156111ba5761119d565b6101206102c435600401610140376101006102c4356004013511156111de57600080fd5b600660043560e05260c052604060c0203360e05260c052604060c0205433600435141761120a57600080fd5b6308c379a06102805260206102a05260206102c0527f43616e6e6f74207472616e7366657220746f207a65726f20616464726573732e6102e0526102c05060006024351861125957608461029cfd5b6103206000600a818352015b604461032051600a811061127857600080fd5b60200201356103405261018461032051600a811061129557600080fd5b6020020135600360043560e05260c052604060c0206103405160e05260c052604060c0205410156112c557600080fd5b5b8151600101808352811415611265575b505060443561036052606435610380526084356103a05260a4356103c05260c4356103e05260e435610400526101043561042052610124356104405261014435610460526101643561048052610184356104a0526101a4356104c0526101c4356104e0526101e435610500526102043561052052610224356105405261024435610560526102643561058052610284356105a0526102a4356105c052602435600435337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610360a46105e06000600a818352015b60446105e051600a81106113c057600080fd5b602002013561060052600360043560e05260c052604060c0206106005160e05260c052604060c0206101846105e051600a81106113fc57600080fd5b60200201358154101561140e57600080fd5b6101846105e051600a811061142257600080fd5b6020020135815403815550600360243560e05260c052604060c0206106005160e05260c052604060c02080546101846105e051600a811061146257600080fd5b6020020135825401101561147557600080fd5b6101846105e051600a811061148957600080fd5b60200201358154018155505b81516001018083528114156113ad575b505060006024353b111561163a576024353b6114c057600080fd5b60243530186114ce57600080fd5b6020610aa06104046102e063a3bfc206610640523361066052600435610680526106a0604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506107e061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250508061092052610140808051602001808461066001828460006004600a8704601201f16115ec57600080fd5b50508051820160206001820306601f820103905060200191505061065c905060006024355af161161b57600080fd5b600050610aa0516106205263e324a00d610620511461163957600080fd5b5b005b62fdd58e600051141561169057341561165457600080fd5b600435602051811061166557600080fd5b50600360043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63fbe31aea60005114156117935734156116a957600080fd5b6000610120525b610120516004013560205181106116c657600080fd5b5060206101205101610120526101206101205110156116e4576116b0565b6000610120525b6020610120510161012052610120610120511015611708576116eb565b6102806000600a818352015b6003600461028051600a811061172957600080fd5b602002013560e05260c052604060c02061014461028051600a811061174d57600080fd5b602002013560e05260c052604060c0205461014061028051600a811061177257600080fd5b60200201525b8151600101808352811415611714575b5050610140610140f3005b63a22cb46560005114156118235734156117ac57600080fd5b60043560205181106117bd57600080fd5b50602435600281106117ce57600080fd5b5060243560063360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c316020610140a3005b63e985e9c5600051141561188a57341561183c57600080fd5b600435602051811061184d57600080fd5b50602435602051811061185f57600080fd5b50600660043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a70b070f6000511415611af85734156118a357600080fd5b60043560205181106118b457600080fd5b50610120604435600401610140376101006044356004013511156118d757600080fd5b6000600435186118e657600080fd5b6308c379a06102805260206102a052601b6102c0527f4f776e6572206f6e6c792063616e20637265617465206974656d2e00000000006102e0526102c050336002541461193457608461029cfd5b6000600360043560e05260c052604060c02060243560e05260c052604060c02055600180546001825401101561196957600080fd5b60018154018155506001600760243560e05260c052604060c0205561014080600560243560e05260c052604060c02060c052602060c020602082510161012060006009818352015b826101205160200211156119c4576119e6565b61012051602002850151610120518501555b81516001018083528114156119b1575b50505050505060206103405261034051610380526101408051602001806103405161038001828460006004600a8704601201f1611a2257600080fd5b5050610320610340516103800151610440818352015b610440610320511115611a4a57611a6b565b600061032051610340516103a00101535b8151600101808352811415611a38575b5050602061034051610380015160206001820306601f8201039050610340510101610340526024357f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61034051610380a26024356103a05260006103c0526004356000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406103a0a4005b6319a35d7c6000511415611d43573415611b1157600080fd5b6004356020518110611b2257600080fd5b506000610120525b6020610120510161012052610120610120511015611b4757611b2a565b600060043518611b5657600080fd5b6308c379a061014052602061016052601c610180527f4f776e6572206f6e6c792063616e20637265617465206974656d732e000000006101a052610180503360025414611ba457608461015cfd5b6101e06000600a818352015b60246101e051600a8110611bc357600080fd5b6020020135610200526000600360043560e05260c052604060c0206102005160e05260c052604060c020556001805460018254011015611c0257600080fd5b6001815401815550600160076102005160e05260c052604060c020555b8151600101808352811415611bb0575b5050610220600081526000816020015260008160400152600081606001526000816080015260008160a0015260008160c0015260008160e00152600081610100015260008161012001525060243561036052604435610380526064356103a0526084356103c05260a4356103e05260c4356104005260e43561042052610104356104405261012435610460526101443561048052610220516104a052610240516104c052610260516104e05261028051610500526102a051610520526102c051610540526102e051610560526103005161058052610320516105a052610340516105c0526004356000337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610360a4005b63156e29f66000511415611d8157600061028052610280805160200180610140828460006004600a8704601201f1611d7a57600080fd5b5050611dce565b63731133e96000511415611dc65761012060643560040161014037610100606435600401351115611db157600080fd5b61014060643560040161014037600050611dce565b60001561208a575b3415611dd957600080fd5b6004356020518110611dea57600080fd5b50600060043518611dfa57600080fd5b6308c379a06102c05260206102e052601a610300527f4f776e6572206f6e6c792063616e206d696e74206974656d732e00000000000061032052610300503360025414611e485760846102dcfd5b610140610380525b61038051516020610380510161038052610380610380511015611e7257611e50565b6320171bef6103a0526024356103c0526103c05160065801610cfa565b61042052610360610380525b6103805152602061038051036103805261014061038051101515611ebe57611e9b565b6104205161036052600261036051146001610360511417611ede57600080fd5b6001610360511415611f5f576308c379a0610440526020610460526028610480527f43616e6e6f74206d696e74204e46542077697468205f737570706c79206d6f726104a0527f65207468616e20310000000000000000000000000000000000000000000000006104c05261048050600160443514611f5e5760a461045cfd5b5b604435600360043560e05260c052604060c02060243560e05260c052604060c0205560243561050052604435610520526004356000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f626040610500a460006004353b1115612088576004353b611fd557600080fd5b6004353018611fe357600080fd5b60206107806101c460a063f23a6e6161056052336105805260006105a0526024356105c0526044356105e0528061060052610140808051602001808461058001828460006004600a8704601201f161203a57600080fd5b50508051820160206001820306601f820103905060200191505061057c905060006004355af161206957600080fd5b600050610780516105405263f23a6e61610540511461208757600080fd5b5b005b63c671854d60005114156120c857600061028052610280805160200180610140828460006004600a8704601201f16120c157600080fd5b5050612118565b63b07e58756000511415612110576101206102a435600401610140376101006102a4356004013511156120fa57600080fd5b6101406102a43560040161014037600050612118565b6000156124f6575b341561212357600080fd5b600435602051811061213457600080fd5b506000610120525b60206101205101610120526101206101205110156121595761213c565b6000610120525b602061012051016101205261012061012051101561217d57612160565b60006004351861218c57600080fd5b6308c379a06102c05260206102e052601a610300527f4f776e6572206f6e6c792063616e206d696e74206974656d732e000000000000610320526103005033600254146121da5760846102dcfd5b6103606000600a818352015b602461036051600a81106121f957600080fd5b6020020135610380526101406103c0525b6103c0515160206103c051016103c0526103c06103c051101561222c5761220a565b6320171bef6103e05261038051610400526104005160065801610cfa565b610460526103a06103c0525b6103c0515260206103c051036103c0526101406103c05110151561227957612256565b610460516103a05260026103a0511460016103a051141761229957600080fd5b60016103a05114156122cb57600161016461036051600a81106122bb57600080fd5b6020020135146122ca57600080fd5b5b61016461036051600a81106122df57600080fd5b6020020135600360043560e05260c052604060c0206103805160e05260c052604060c020555b81516001018083528114156121e6575b5050602435610480526044356104a0526064356104c0526084356104e05260a4356105005260c4356105205260e4356105405261010435610560526101243561058052610144356105a052610164356105c052610184356105e0526101a435610600526101c435610620526101e4356106405261020435610660526102243561068052610244356106a052610264356106c052610284356106e0526004356000337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610480a46107006000600a818352015b60006004353b11156124e1576004353b61240357600080fd5b600435301861241157600080fd5b60206109606101c460a063f23a6e61610740523361076052600061078052602461070051600a811061244257600080fd5b60200201356107a05261016461070051600a811061245f57600080fd5b60200201356107c052806107e052610140808051602001808461076001828460006004600a8704601201f161249357600080fd5b50508051820160206001820306601f820103905060200191505061075c905060006004355af16124c257600080fd5b600050610960516107205263f23a6e6161072051146124e057600080fd5b5b5b81516001018083528114156123ea575b5050005b63b390c0ab60005114156125ea57341561250f57600080fd5b6308c379a061014052602061016052601a610180527f4e6f7420656e6f75676820746f6b656e7320746f206275726e2e0000000000006101a0526101805060243560033360e05260c052604060c02060043560e05260c052604060c02054101561257a57608461015cfd5b60033360e05260c052604060c02060043560e05260c052604060c020602435815410156125a657600080fd5b6024358154038155506004356101e05260243561020052600033337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406101e0a4005b63b59afe52600051141561282b57341561260357600080fd5b6000610120525b60206101205101610120526101206101205110156126275761260a565b6000610120525b602061012051016101205261012061012051101561264b5761262e565b6101406000600a818352015b600461014051600a811061266a57600080fd5b60200201356101605261014461014051600a811061268757600080fd5b602002013560033360e05260c052604060c0206101605160e05260c052604060c0205410156126b557600080fd5b5b8151600101808352811415612657575b50506101806000600a818352015b600461018051600a81106126e757600080fd5b60200201356101a05260033360e05260c052604060c0206101a05160e05260c052604060c02061014461018051600a811061272157600080fd5b60200201358154101561273357600080fd5b61014461018051600a811061274757600080fd5b60200201358154038155505b81516001018083528114156126d4575b50506004356101c0526024356101e05260443561020052606435610220526084356102405260a4356102605260c4356102805260e4356102a052610104356102c052610124356102e0526101443561030052610164356103205261018435610340526101a435610360526101c435610380526101e4356103a052610204356103c052610224356103e05261024435610400526102643561042052600033337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa86102806101c0a4005b63f2526ada6000511415612869576000610320526103208051602001806101e0828460006004600a8704601201f161286257600080fd5b50506128b9565b63a835c36960005114156128b157610120610464356004016101e0376101006104643560040135111561289b57600080fd5b610140610464356004016101e0376000506128b9565b600015613725575b60043560205181106128ca57600080fd5b5060243560205181106128dc57600080fd5b506000610120525b6020610120510161012052610120610120511015612901576128e4565b6000610120525b602061012051016101205261012061012051101561292557612908565b6000610120525b60206101205101610120526101206101205110156129495761292c565b6061610444356004016101403760416104443560040135111561296b57600080fd5b6308c379a061036052602061038052602c6103a0527f5f66726f6d206d757374206265207468652073656e646572206f7220617070726103c0527f6f766564206164647265737300000000000000000000000000000000000000006103e0526103a050600660043560e05260c052604060c0203360e05260c052604060c020543360043514176129fc5760a461037cfd5b6308c379a0610420526020610440526025610460527f44657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d610480527f7a65726f2e0000000000000000000000000000000000000000000000000000006104a05261046050600060243518612a705760a461043cfd5b6308c379a06104e0526020610500526015610520527f4e6f6e6365206d75737420626520756e757365642e00000000000000000000006105405261052050600460043560e05260c052604060c0206104243560e05260c052604060c0205415612ada5760846104fcfd5b6308c379a06105805260206105a05260256105c0527f53656e64657220686173206e6f742070726f766964656420656e6f75676820656105e0527f746865722e000000000000000000000000000000000000000000000000000000610600526105c050346104043514612b4e5760a461059cfd5b6106406000600a818352015b604461064051600a8110612b6d57600080fd5b602002013561066052600061018461064051600a8110612b8c57600080fd5b60200201351115612c03576102c461064051600a8110612bab57600080fd5b602002013515612bba57600080fd5b61018461064051600a8110612bce57600080fd5b6020020135600360043560e05260c052604060c0206106605160e05260c052604060c020541015612bfe57600080fd5b612c6b565b61018461064051600a8110612c1757600080fd5b602002013515612c2657600080fd5b6102c461064051600a8110612c3a57600080fd5b6020020135600360243560e05260c052604060c0206106605160e05260c052604060c020541015612c6a57600080fd5b5b5b8151600101808352811415612b5a575b50506101406106a0525b6106a0515160206106a051016106a0526106a06106a0511015612ca857612c86565b6373ad25716106c0526004356106e05260243561070052610720604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505061086061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506109a06102c480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505061040435610ae05261042435610b0052610b0051610ae051610ac051610aa051610a8051610a6051610a4051610a2051610a00516109e0516109c0516109a05161098051610960516109405161092051610900516108e0516108c0516108a05161088051610860516108405161082051610800516107e0516107c0516107a05161078051610760516107405161072051610700516106e051600658016100dc565b610b60526106806106a0525b6106a0515260206106a051036106a0526101406106a051101515612ecc57612ea9565b610b605161068052610140610ba0525b610ba051516020610ba05101610ba052610ba0610ba0511015612efe57612edc565b6040636f868168610bc05261068051610be05280610c00526101408080516020018084610be001828460006004600a8704601201f1612f3c57600080fd5b50508051820160206001820306601f820103905060200191505050610c005180610be00180518060206001820306601f82010390508201610ce0525050505b610c20610ce0511015612f8d57612fa2565b610ce051516020610ce05103610ce052612f7b565b610c0051610be05160065801610a98565b610d0052610b80610ba0525b610ba051526020610ba05103610ba052610140610ba051101515612fe257612fbf565b610d0051610b80526308c379a0610d20526020610d40526020610d60527f5369676e657220646f6573206e6f74206d61746368207369676e61747572652e610d8052610d6050602435610b80511461303b576084610d3cfd5b600160043360e05260c052604060c0206104243560e05260c052604060c02055610dc06000600a818352015b6044610dc051600a811061307a57600080fd5b6020020135610de0526000610184610dc051600a811061309957600080fd5b6020020135111561317457600360043560e05260c052604060c020610de05160e05260c052604060c020610184610dc051600a81106130d757600080fd5b6020020135815410156130e957600080fd5b610184610dc051600a81106130fd57600080fd5b6020020135815403815550600360243560e05260c052604060c020610de05160e05260c052604060c0208054610184610dc051600a811061313d57600080fd5b6020020135825401101561315057600080fd5b610184610dc051600a811061316457600080fd5b6020020135815401815550613240565b600360043560e05260c052604060c020610de05160e05260c052604060c02080546102c4610dc051600a81106131a957600080fd5b602002013582540110156131bc57600080fd5b6102c4610dc051600a81106131d057600080fd5b6020020135815401815550600360243560e05260c052604060c020610de05160e05260c052604060c0206102c4610dc051600a811061320e57600080fd5b60200201358154101561322057600080fd5b6102c4610dc051600a811061323457600080fd5b60200201358154038155505b5b8151600101808352811415613067575b50506000600060006000346024356000f161326b57600080fd5b604435610e0052606435610e2052608435610e405260a435610e605260c435610e805260e435610ea05261010435610ec05261012435610ee05261014435610f005261016435610f205261018435610f40526101a435610f60526101c435610f80526101e435610fa05261020435610fc05261022435610fe0526102443561100052610264356110205261028435611040526102a43561106052602435600435337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280610e00a4604435611080526064356110a0526084356110c05260a4356110e05260c4356111005260e43561112052610104356111405261012435611160526101443561118052610164356111a0526102c4356111c0526102e4356111e052610304356112005261032435611220526103443561124052610364356112605261038435611280526103a4356112a0526103c4356112c0526103e4356112e052600435602435337f514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8610280611080a460006024353b1115613590576024353b61341657600080fd5b602435301861342457600080fd5b60206117806104046102e063a3bfc20661132052336113405260243561136052611380604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506114c061018480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505080611600526101e0808051602001808461134001828460006004600a8704601201f161354257600080fd5b50508051820160206001820306601f820103905060200191505061133c905060006024355af161357157600080fd5b6000506117805161130052630c97e564611300511461358f57600080fd5b5b60006004353b1115613723576004353b6135a957600080fd5b60043530186135b757600080fd5b6020611c206104046102e063a3bfc2066117c052336117e05260043561180052611820604480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e0015280610100013582610100015280610120013582610120015250506119606102c480358252806020013582602001528060400135826040015280606001358260600152806080013582608001528060a001358260a001528060c001358260c001528060e001358260e00152806101000135826101000152806101200135826101200152505080611aa0526101e080805160200180846117e001828460006004600a8704601201f16136d557600080fd5b50508051820160206001820306601f82010390506020019150506117dc905060006004355af161370457600080fd5b600050611c20516117a052630c97e5646117a0511461372257600080fd5b5b005b636e8205b26000511415613763576000610320526103208051602001806101e0828460006004600a8704601201f161375c57600080fd5b50506137b3565b63183f5ec560005114156137ab57610120610104356004016101e0376101006101043560040135111561379557600080fd5b610140610104356004016101e0376000506137b3565b600015613f5d575b60043560205181106137c457600080fd5b5060243560205181106137d657600080fd5b50606160e43560040161014037604160e4356004013511156137f757600080fd5b600660043560e05260c052604060c0203360e05260c052604060c0205433600435141761382357600080fd5b6308c379a06103605260206103805260256103a0527f44657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d6103c0527f7a65726f2e0000000000000000000000000000000000000000000000000000006103e0526103a0506000602435186138975760a461037cfd5b6308c379a0610420526020610440526015610460527f4e6f6e6365206d75737420626520756e757365642e00000000000000000000006104805261046050600460043560e05260c052604060c02060c43560e05260c052604060c020541561390057608461043cfd5b6308c379a06104c05260206104e0526025610500527f53656e64657220686173206e6f742070726f766964656420656e6f7567682065610520527f746865722e00000000000000000000000000000000000000000000000000000061054052610500503460a435146139735760a46104dcfd5b600060643511156139bd576084351561398b57600080fd5b606435600360043560e05260c052604060c02060443560e05260c052604060c0205410156139b857600080fd5b6139f8565b606435156139ca57600080fd5b608435600360243560e05260c052604060c02060443560e05260c052604060c0205410156139f757600080fd5b5b6101406105a0525b6105a0515160206105a051016105a0526105a06105a0511015613a2257613a00565b63155960636105c0526004356105e0526024356106005260443561062052606435610640526084356106605260a4356106805260c4356106a0526106a05161068051610660516106405161062051610600516105e05160065801610911565b610700526105806105a0525b6105a0515260206105a051036105a0526101406105a051101515613ab057613a8d565b6107005161058052610140610740525b61074051516020610740510161074052610740610740511015613ae257613ac0565b6040636f868168610760526105805161078052806107a052610140808051602001808461078001828460006004600a8704601201f1613b2057600080fd5b50508051820160206001820306601f8201039050602001915050506107a051806107800180518060206001820306601f82010390508201610880525050505b6107c0610880511015613b7157613b86565b61088051516020610880510361088052613b5f565b6107a0516107805160065801610a98565b6108a052610720610740525b6107405152602061074051036107405261014061074051101515613bc657613ba3565b6108a051610720526308c379a06108c05260206108e0526020610900527f5369676e657220646f6573206e6f74206d61746368207369676e61747572652e61092052610900506024356107205114613c1f5760846108dcfd5b600160043360e05260c052604060c02060c43560e05260c052604060c0205560006064351115613cbf57600360043560e05260c052604060c02060443560e05260c052604060c02060643581541015613c7757600080fd5b606435815403815550600360243560e05260c052604060c02060443560e05260c052604060c02080546064358254011015613cb157600080fd5b606435815401815550613d31565b600360043560e05260c052604060c02060443560e05260c052604060c02080546084358254011015613cf057600080fd5b608435815401815550600360243560e05260c052604060c02060443560e05260c052604060c02060843581541015613d2757600080fd5b6084358154038155505b6000600060006000346024356000f1613d4957600080fd5b6044356109605260643561098052602435600435337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f626040610960a46044356109a0526084356109c052600435602435337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406109a0a460006024353b1115613e8e576024353b613dda57600080fd5b6024353018613de857600080fd5b6020610c206101c460a063f23a6e61610a005233610a2052602435610a4052604435610a6052606435610a805280610aa0526101e08080516020018084610a2001828460006004600a8704601201f1613e4057600080fd5b50508051820160206001820306601f8201039050602001915050610a1c905060006024355af1613e6f57600080fd5b600050610c20516109e052630c97e5646109e05114613e8d57600080fd5b5b60006004353b1115613f5b576004353b613ea757600080fd5b6004353018613eb557600080fd5b6020610e806101c460a063f23a6e61610c605233610c8052600435610ca052604435610cc052608435610ce05280610d00526101e08080516020018084610c8001828460006004600a8704601201f1613f0d57600080fd5b50508051820160206001820306601f8201039050602001915050610c7c905060006004355af1613f3c57600080fd5b600050610e8051610c4052630c97e564610c405114613f5a57600080fd5b5b005b638da5cb5b6000511415613f84573415613f7657600080fd5b60025460005260206000f350005b60006000fd",
  "source": "# Author: Sören Steiger, github.com/ssteiger\n# Author: Fetch.ai, github.com/fetchai\n# License: MIT\n\n# ERC1155 Token Standard\n# https://eips.ethereum.org/EIPS/eip-1155\n\n########################EXTERNAL-CONTRACTS####################################\n\ncontract ERC1155TokenReceiver:\n    # Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n\n    def onERC1155Received(_operator: address, _from: address, _id: uint256, _value: uint256,\n                          _data: bytes[256]) -> bytes32: modifying  # TODO: should return bytes4\n    #        \"\"\"\n    #       @notice Handle the receipt of a single ERC1155 token type.\n    #       @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \n    #       This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n    #       This function MUST revert if it rejects the transfer.\n    #       Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n    #       @param _operator  The address which initiated the transfer (i.e. msg.sender)\n    #       @param _from      The address which previously owned the token\n    #       @param _id        The ID of the token being transferred\n    #       @param _value     The amount of tokens being transferred\n    #       @param _data      Additional data with no specified format\n    #       @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    #       \"\"\"\n\n    def onERC1155BatchReceived(_operator: address, _from: address, _ids: uint256[BATCH_SIZE], _values: uint256[BATCH_SIZE],\n                               _data: bytes[256]) -> bytes32: modifying  # TODO: should return bytes4\n    #       \"\"\"\n    #       @notice Handle the receipt of multiple ERC1155 token types.\n    #       @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \n    #       This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n    #       This function MUST revert if it rejects the transfer(s).\n    #       Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n    #       @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n    #       @param _from      The address which previously owned the token\n    #       @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n    #       @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n    #       @param _data      Additional data with no specified format\n    #       @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    #       \"\"\"\n\n########################END-EXTERNAL-CONTRACTS####################################\n########################EVENTS####################################\n\nMAX_URI_SIZE: constant(uint256) = 1024\n\nTransferSingle: event({_operator: indexed(address), _from: indexed(address), _to: indexed(address), _id: uint256,\n                       _value: uint256})\n#   @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n#        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n#        The `_from` argument MUST be the address of the holder whose balance is decreased.\n#        The `_to` argument MUST be the address of the recipient whose balance is increased.\n#        The `_id` argument MUST be the token type being transferred.\n#        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n#        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n#        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n\n\nTransferBatch: event({_operator: indexed(address), _from: indexed(address), _to: indexed(address),\n                      _ids: uint256[BATCH_SIZE], _values: uint256[BATCH_SIZE]})\n#   @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n#        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n#        The `_from` argument MUST be the address of the holder whose balance is decreased.\n#        The `_to` argument MUST be the address of the recipient whose balance is increased.\n#        The `_ids` argument MUST be the list of tokens being transferred.\n#        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\n#        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n#        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n\n\nApprovalForAll: event({_owner: indexed(address), _operator: indexed(address), _approved: bool})\n#   @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled).\n\n\nURI: event({_value: string[MAX_URI_SIZE], _id: indexed(uint256)})\n#   @dev MUST emit when the URI is updated for a token ID.\n#        URIs are defined in RFC 3986.\n#        The URI MUST point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\n\n########################END-EVENTS####################################\n########################INITIALIZATION####################################\n\nsupportedInterfaces: map(bytes32, bool)\n# https://eips.ethereum.org/EIPS/eip-165\nERC165_INTERFACE_ID: constant(bytes32)  = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\nERC1155_INTERFACE_ID: constant(bytes32) = 0x00000000000000000000000000000000000000000000000000000000d9b67a26\ntokensIdCount: uint256\nowner: public(address)\n\nbalancesOf: map(address, map(uint256, uint256))\nnoncesOf: map(address, map(uint256, bool))\nuri: map(uint256, string[256])\noperators: map(address, map(address, bool))\ntoken_ids: map(uint256, bool)\n\n# This is to be set before contract migration!\nBATCH_SIZE: constant(uint256) = 10\n\n\n@public\ndef __init__():\n    \"\"\"\n    @notice Called once and only upon contract deployment.\n    \"\"\"\n    self.tokensIdCount = convert(0, uint256)\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC1155_INTERFACE_ID] = True\n    self.owner = msg.sender\n\n########################END-INITIALIZATION####################################\n########################PRIVATE-FUNCTIONS####################################\n\n\n######### THIS IS A TEMPORARY SOLUTION #################\n@public\n@constant\ndef getAddress(_addr: address) -> bytes32:\n    hash: bytes32 = convert(_addr, bytes32)\n    return hash\n##################### END ##############################\n\n@private\n@constant\ndef _getHash(_from: address, _to: address, _ids: uint256[BATCH_SIZE], _from_supplies: uint256[BATCH_SIZE], _to_supplies: uint256[BATCH_SIZE], _value_eth: uint256, _nonce: uint256) -> bytes32:\n    \"\"\"\n    @notice Get the hash from the tx values.\n    @param _from          The address of the sender.\n    @param _to            The address of the receiver.\n    @param _ids           The ids of the tokens.\n    @param _from_supplies The supply of token values that will send the _from.\n    @param _to_supplies   The supply of token values that will send the _from.\n    @param _value_eth     The value of the ether.\n    @param _nonce         The nonce.\n    @return the hash\n    \"\"\"\n    aggregate_hash: bytes32 = keccak256(concat(convert(_ids[0], bytes32), convert(_from_supplies[0], bytes32), convert(_to_supplies[0], bytes32)))\n    for i in range(BATCH_SIZE):\n      if not i == 0:\n        aggregate_hash = keccak256(concat(aggregate_hash, convert(_ids[i], bytes32), convert(_from_supplies[i], bytes32), convert(_to_supplies[i], bytes32)))\n    hash: bytes32 = keccak256(concat(convert(_from, bytes32),\n                              convert(_to, bytes32),\n                              aggregate_hash,\n                              convert(_value_eth, bytes32),\n                              convert(_nonce, bytes32)))\n    return hash\n\n\n@public\n@constant\ndef getHash(_from: address, _to: address, _ids: uint256[BATCH_SIZE], _from_supplies: uint256[BATCH_SIZE], _to_supplies: uint256[BATCH_SIZE], _value_eth: uint256, _nonce: uint256) -> bytes32:\n    \"\"\"\n    @notice Get the hash from the tx values.\n    @param _from          The address of the sender.\n    @param _to            The address of the receiver.\n    @param _ids           The ids of the tokens.\n    @param _from_supplies The supply of token values that will send the _from.\n    @param _to_supplies   The supply of token values that will send the _from.\n    @param _value_eth     The value of the ether.\n    @param _nonce         The nonce.\n    @return the hash\n    \"\"\"\n    return self._getHash(_from, _to, _ids, _from_supplies, _to_supplies, _value_eth, _nonce)\n\n\n@private\n@constant\ndef getHashOld(_from: address, _to: address, _ids: uint256[BATCH_SIZE], _from_supplies: uint256[BATCH_SIZE], _to_supplies: uint256[BATCH_SIZE], _value_eth: uint256, _nonce: uint256) -> bytes32:\n    \"\"\"\n    @notice Get the hash from the tx values.\n    @param _from          The address of the sender.\n    @param _to            The address of the receiver.\n    @param _ids           The ids of the tokens.\n    @param _from_supplies The supply of token values that will send the _from.\n    @param _to_supplies   The supply of token values that will send the _from.\n    @param _value_eth     The value of the ether.\n    @param _nonce         The nonce.\n    @return the hash\n    \"\"\"\n    hash: bytes32 = keccak256(concat(convert(_from, bytes32),\n                              convert(_to, bytes32),\n                              convert(_ids[0], bytes32),\n                              convert(_ids[1], bytes32),\n                              convert(_ids[2], bytes32),\n                              convert(_ids[3], bytes32),\n                              convert(_ids[4], bytes32),\n                              convert(_ids[5], bytes32),\n                              convert(_ids[6], bytes32),\n                              convert(_ids[7], bytes32),\n                              convert(_ids[8], bytes32),\n                              convert(_ids[9], bytes32),\n                              convert(_from_supplies[0], bytes32),\n                              convert(_from_supplies[1], bytes32),\n                              convert(_from_supplies[2], bytes32),\n                              convert(_from_supplies[3], bytes32),\n                              convert(_from_supplies[4], bytes32),\n                              convert(_from_supplies[5], bytes32),\n                              convert(_from_supplies[6], bytes32),\n                              convert(_from_supplies[7], bytes32),\n                              convert(_from_supplies[8], bytes32),\n                              convert(_from_supplies[9], bytes32),\n                              convert(_to_supplies[0], bytes32),\n                              convert(_to_supplies[1], bytes32),\n                              convert(_to_supplies[2], bytes32),\n                              convert(_to_supplies[3], bytes32),\n                              convert(_to_supplies[4], bytes32),\n                              convert(_to_supplies[5], bytes32),\n                              convert(_to_supplies[6], bytes32),\n                              convert(_to_supplies[7], bytes32),\n                              convert(_to_supplies[8], bytes32),\n                              convert(_to_supplies[9], bytes32),\n                              convert(_value_eth, bytes32),\n                              convert(_nonce, bytes32)))\n    return hash\n\n\n@private\n@constant\ndef _getSingleHash(_from: address, _to: address, _id: uint256, _from_supply: uint256, _to_supply: uint256, _value_eth: uint256, _nonce: uint256) -> bytes32:\n    \"\"\"\n    @notice Get the hash from the tx values.\n    @param _from            The address of the sender.\n    @param _to              The address of the receiver.\n    @param _id              The id of the tokens.\n    @param _from_supply     The from token value. (_from sends)\n    @param _to_supply       The to token value (_to sends).\n    @param _value_eth       The value of the ether.\n    @param _nonce           The nonce.\n    @return the hash\n    \"\"\"\n    hash: bytes32 = keccak256(concat(convert(_from, bytes32),\n                              convert(_to, bytes32),\n                              convert(_id, bytes32),\n                              convert(_from_supply, bytes32),\n                              convert(_to_supply, bytes32),\n                              convert(_value_eth, bytes32),\n                              convert(_nonce, bytes32)))\n    return hash\n\n\n@public\n@constant\ndef getSingleHash(_from: address, _to: address, _id: uint256, _from_supply: uint256, _to_supply: uint256, _value_eth: uint256, _nonce: uint256) -> bytes32:\n    \"\"\"\n    @notice Get the hash from the tx values.\n    @param _from            The address of the sender.\n    @param _to              The address of the receiver.\n    @param _id              The id of the tokens.\n    @param _from_supply     The from token value. (_from sends)\n    @param _to_supply       The to token value (_to sends).\n    @param _value_eth       The value of the ether.\n    @param _nonce           The nonce.\n    @return the hash\n    \"\"\"\n    return self._getSingleHash(_from, _to, _id, _from_supply, _to_supply, _value_eth, _nonce)\n\n\n@private\n@constant\ndef ecrecoverSig(_hash: bytes32, _sig: bytes[65]) -> address:\n    \"\"\"\n    @notice Check whether the the signature matches the hash.\n    @param _hash The hash to be checked.\n    @param _sig  The signature which is meant to match the hash.\n    @return the address which signed the signature or the zero address\n    \"\"\"\n    if len(_sig) != 65:\n        return ZERO_ADDRESS\n    # ref. https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n    # The signature format is a compact form of:\n    # {bytes32 r}{bytes32 s}{uint8 v}\n    r: bytes32 = extract32(_sig, 0, type=bytes32)\n    s: bytes32 = extract32(_sig, 32, type=bytes32)\n    v: int128 = convert(slice(_sig, start=64, len=1), int128)\n    # Version of signature should be 27 or 28, but 0 and 1 are also possible versions.\n    # geth uses [0, 1] and some clients have followed. This might change, see:\n    # https://github.com/ethereum/go-ethereum/issues/2053\n    if v < 27:\n        v += 27\n    if v in [27, 28]:\n        return ecrecover(_hash, convert(v, uint256), convert(r, uint256), convert(s, uint256))\n    return ZERO_ADDRESS\n\n\n@private\n@constant\ndef decode_id(id: uint256) -> int128:\n    \"\"\"\n    @notice Decodes the id of the token inorder to find out if it NFT or FT.\n    @param id: uint256\n    @return token_id : int128 (Specified id for FT and NFT.)\n    @dev shift(x, -y): returns x with the bits shifted to the right by y places, which is equivalent to dividing x by 2**y.\n    \"\"\"\n    decoded_token_id: int128 = convert(shift(id, -128), int128)\n    decoded_index: int128 = convert(id % 2 ** 128, int128)\n    return decoded_token_id\n\n########################END-PRIVATE-FUNCTIONS################################\n########################PUBLIC-FUNCTIONS#####################################\n\n@public\n@constant\ndef supportsInterface(_interfaceID: bytes32) -> bool:\n    \"\"\"\n    @notice Check whether the interface id is supported.\n    @param _interfaceID The interface id\n    @return True if the interface id is supported.\n    \"\"\"\n    return self.supportedInterfaces[_interfaceID]\n\n@public\n@constant\ndef is_nonce_used(addr: address, nonce: uint256) -> bool:\n    \"\"\"\n    @notice Checks if the given nonce for the give address is unused.\n    @param nonce: uint256 the counter of the transaction\n    @param address: the address that want to transact.\n    \"\"\"\n    return self.noncesOf[addr][nonce]\n\n@public\n@constant\ndef is_token_id_exists(token_id: uint256) -> bool:\n    \"\"\"\n    @notice Checks if the given token_id is already created.\n    @param token_id: uint256 the id of the token.\n    \"\"\"\n    return self.token_ids[token_id]\n\n@public\ndef safeTransferFrom(_from: address, _to: address, _id: uint256, _value: uint256, _data: bytes[256]):\n    \"\"\"\n    @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n    @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n         MUST revert if `_to` is the zero address.\n         MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n         MUST revert on any other error.\n         MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\n         After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n    @param _from    Source address\n    @param _to      Target address\n    @param _id      ID of the token type\n    @param _value   Transfer amount\n    @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n    @return None\n    \"\"\"\n    assert _from == msg.sender or (self.operators[_from])[msg.sender]\n    assert _to != ZERO_ADDRESS, \"Cannot transfer to zero address.\"\n    assert self.balancesOf[_from][_id] >= _value, \"Not enough tokens.\"\n\n    self.balancesOf[_from][_id] -= _value\n    self.balancesOf[_to][_id] += _value\n\n    log.TransferSingle(msg.sender, _from, _to, _id, _value)\n\n    if _to.is_contract:\n        returnValue: bytes32 = ERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _value, _data)\n        assert returnValue == method_id(\"onERC1155Received(address,address,uint256,uint256,bytes)\", bytes32)\n\n\n@public\ndef safeBatchTransferFrom(_from: address, _to: address, _ids: uint256[BATCH_SIZE], _values: uint256[BATCH_SIZE], _data: bytes[256]):\n    \"\"\"\n    @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n    @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if length of `_ids` is not the same as length of `_values`.\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n        MUST revert on any other error.\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n    @param _from    Source address\n    @param _to      Target address\n    @param _ids     IDs of each token type (order and length must match _values array)\n    @param _values  Transfer amounts per token type (order and length must match _ids array)\n    @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n    @return None\n    \"\"\"\n    assert _from == msg.sender or (self.operators[_from])[msg.sender]\n    assert _to != ZERO_ADDRESS, \"Cannot transfer to zero address.\"\n    for i in range(BATCH_SIZE):\n        id: uint256 = _ids[i]\n        assert self.balancesOf[_from][id] >= _values[i]\n\n    log.TransferBatch(msg.sender, _from, _to, _ids, _values)\n\n    for i in range(BATCH_SIZE):\n        id: uint256 = _ids[i]\n        self.balancesOf[_from][id] -= _values[i]\n        self.balancesOf[_to][id] += _values[i]\n\n    if _to.is_contract:\n        returnValue: bytes32 = ERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _values, _data)\n        assert returnValue == method_id(\"onERC1155BatchReceived(address,address,uint256[BATCH_SIZE],uint256[BATCH_SIZE],bytes)\", bytes32)\n\n\n@public\n@constant\ndef balanceOf(_owner: address, _id: uint256) -> uint256:\n    \"\"\"\n    @notice Get the balance of an account's tokens.\n    @param  _owner The address of the token holder\n    @param  _id    ID of the token\n    @return The _owner's balance of the token type requested\n    \"\"\"\n    return self.balancesOf[_owner][_id]\n\n\n@public\n@constant\ndef balanceOfBatch( _owner: address[BATCH_SIZE], _ids: uint256[BATCH_SIZE]) -> uint256[BATCH_SIZE]:\n    \"\"\"\n    @notice Get the balance of multiple account/token pairs\n    @param _owners The addresses of the token holders\n    @param _ids    ID of the tokens\n    @return The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\n    \"\"\"\n    returnBalances: uint256[BATCH_SIZE]\n    for i in range(BATCH_SIZE):\n        returnBalances[i] = self.balancesOf[_owner[i]][_ids[i]]\n    return returnBalances\n\n\n@public\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n    @dev MUST emit the ApprovalForAll event on success.\n    @param _operator  Address to add to the set of authorized operators\n    @param _approved  True if the operator is approved, false to revoke approval\n    @return None\n    \"\"\"\n    (self.operators[msg.sender])[_operator] = _approved\n    log.ApprovalForAll(msg.sender, _operator, _approved)\n\n\n@public\n@constant\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\n    \"\"\"\n    @notice Queries the approval status of an operator for a given owner.\n    @param _owner     The owner of the tokens.\n    @param _operator  Address of authorized operator.\n    @return True if the operator is approved, false if not\n    \"\"\"\n    return (self.operators[_owner])[_operator]\n\n\n@public\ndef createSingle(_item_owner: address, _id: uint256, _path: string[256]):\n    \"\"\"\n    @notice Create a new token type that we can mint later.\n    @param _item_owner The owner of the item.\n    @param _id         The id of the token.\n    @param _path       The path to the token data.\n    @return None\n    \"\"\"\n    assert _item_owner != ZERO_ADDRESS\n    assert self.owner == msg.sender, \"Owner only can create item.\"\n    self.balancesOf[_item_owner][_id] = 0\n    self.tokensIdCount += 1\n    self.token_ids[_id] = True\n    self.uri[_id] = _path\n    log.URI(_path, _id)\n    log.TransferSingle(msg.sender, ZERO_ADDRESS, _item_owner, _id, 0)\n\n\n@public\ndef createBatch(_items_owner: address, _ids: uint256[BATCH_SIZE]):\n    \"\"\"\n    @notice Create new token types that we can mint later.\n    @param _items_owner The owner of the items.\n    @param _ids         The ids of the tokens.\n    @return None\n    \"\"\"\n    assert _items_owner != ZERO_ADDRESS\n    assert self.owner == msg.sender, \"Owner only can create items.\"\n    for i in range(BATCH_SIZE):\n        id: uint256 = _ids[i]\n        self.balancesOf[_items_owner][id] = 0\n        self.tokensIdCount += 1\n        self.token_ids[id] = True\n    zero_supply: uint256[BATCH_SIZE] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    log.TransferBatch(msg.sender, ZERO_ADDRESS, _items_owner, _ids, zero_supply)\n\n\n@public\ndef mint(_to: address, _id: uint256, _supply: uint256, _data: bytes[256]=\"\"):\n    \"\"\"\n    @notice Mint a token.\n    @dev This is not part of the standard.\n    @param _to      The address of the receiver.\n    @param _id      The id of the token.\n    @param _supply  The supply to be minted for the token.\n    @param _data    The data.\n    @return None\n    \"\"\"\n    assert _to != ZERO_ADDRESS\n    assert self.owner == msg.sender, \"Owner only can mint items.\"\n    decoded_id: int128 = self.decode_id(_id)\n    assert decoded_id == 1 or decoded_id == 2\n    if decoded_id == 1 :\n        assert _supply == 1, \"Cannot mint NFT with _supply more than 1\"\n    self.balancesOf[_to][_id] = _supply\n\n    log.TransferSingle(msg.sender, ZERO_ADDRESS, _to, _id, _supply)\n\n    if _to.is_contract:\n        returnValue: bytes32 = ERC1155TokenReceiver(_to).onERC1155Received(msg.sender, ZERO_ADDRESS, _id, _supply, _data)\n        assert returnValue == method_id(\"onERC1155Received(address,address,uint256,uint256,bytes)\", bytes32)\n\n\n@public\ndef mintBatch(_to: address, _ids: uint256[BATCH_SIZE], _supplies: uint256[BATCH_SIZE], _data: bytes[256]=\"\"):\n    \"\"\"\n    @notice Mint a batch of tokens.\n    @dev This is not part of the standard.\n    @param _to      The address of the receiver.\n    @param _ids     The ids of the tokens.\n    @param _supplies The supply to be minted for each token.\n    @param _data    The data.\n    @return None\n    \"\"\"\n    assert _to != ZERO_ADDRESS\n    assert self.owner == msg.sender, \"Owner only can mint items.\"\n\n    for i in range(BATCH_SIZE):\n        id: uint256 = _ids[i]\n        decoded_id: int128 = self.decode_id(id)\n        assert decoded_id == 1 or decoded_id == 2\n\n        if decoded_id == 1 :\n            assert _supplies[i] == 1\n\n        self.balancesOf[_to][id] = _supplies[i]\n\n    log.TransferBatch(msg.sender, ZERO_ADDRESS, _to, _ids, _supplies)\n\n    for i in range(BATCH_SIZE):\n        if _to.is_contract:\n            returnValue: bytes32 = ERC1155TokenReceiver(_to).onERC1155Received(msg.sender, ZERO_ADDRESS, _ids[i], _supplies[i], _data)\n            assert returnValue == method_id(\"onERC1155Received(address,address,uint256,uint256,bytes)\", bytes32)\n\n\n@public\ndef burn(_id: uint256, _supply: uint256):\n    \"\"\"\n    @notice Burns the supply of the specified token.\n    @param _id        The id of the token\n    @param _supply    Supply to be burned\n    @return None\n    \"\"\"\n    assert self.balancesOf[msg.sender][_id] >= _supply, \"Not enough tokens to burn.\"\n    self.balancesOf[msg.sender][_id] -= _supply\n    log.TransferSingle(msg.sender, msg.sender, ZERO_ADDRESS, _id, _supply)\n\n\n@public\ndef burnBatch(_ids: uint256[BATCH_SIZE], _supplies: uint256[BATCH_SIZE]):\n    \"\"\"\n    @notice Burns the supply of the specified tokens.\n    @dev At this point anyone can burn items if they own it.\n    @param _ids        The ids of the token\n    @param _supplies   Supplies to be burned\n    @return None\n    \"\"\"\n    for i in range(BATCH_SIZE):\n        id: uint256 = _ids[i]\n        assert self.balancesOf[msg.sender][id] >= _supplies[i]\n\n    for i in range(BATCH_SIZE):\n        id: uint256 = _ids[i]\n        self.balancesOf[msg.sender][id] -= _supplies[i]\n    log.TransferBatch(msg.sender, msg.sender, ZERO_ADDRESS, _ids, _supplies)\n\n\n@public\n@payable\ndef tradeBatch(_from: address, _to: address, _ids: uint256[BATCH_SIZE], _from_supplies: uint256[BATCH_SIZE], _to_supplies: uint256[BATCH_SIZE], _value_eth: uint256, _nonce: uint256, _signature: bytes[65], _data: bytes[256]=\"\"):\n    \"\"\"\n    @notice Trade (atomically swap) tokens with tokens or eth.\n    @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if _from_supplies[i] > 0 and _to_supplies[i] > 0\n        MUST revert if len(_ids) != len(_from_supplies) != len(_to_supplies)\n        MUST revert if _value_eth != msg.value\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `positive and negative values` sent to the recipient.\n        MUST revert on any other error.\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n    @param _from          The address of the sender.\n    @param _to            The address of the receiver.\n    @param _ids           The ids of the tokens.\n    @param _from_supplies The supply of token values that will send the _from.\n    @param _to_supplies   The supply of token values that will send the _from.\n    @param _value_eth     The value of the ether.\n    @param _nonce         The nonce.\n    @param _signature    The signature of the _to address.\n    @param _data    The data.\n    @return None\n    \"\"\"\n    # Assert the value of the transaction is less than the balance of A.\n\n    assert _from == msg.sender or (self.operators[_from])[msg.sender], \"_from must be the sender or approved address\"\n    assert _to != ZERO_ADDRESS, \"Destination address must be non-zero.\"\n    assert self.noncesOf[_from][_nonce] == False, \"Nonce must be unused.\"\n    assert _value_eth == msg.value, \"Sender has not provided enough ether.\"\n\n    for i in range(BATCH_SIZE):\n       id: uint256 = _ids[i]\n       if _from_supplies[i] > 0:\n           assert _to_supplies[i] == 0\n           assert self.balancesOf[_from][id] >= _from_supplies[i]\n       else:\n           assert _from_supplies[i] == 0\n           assert self.balancesOf[_to][id] >= _to_supplies[i]\n\n    # Create hash from variables.\n    hash: bytes32 = self._getHash(_from, _to, _ids, _from_supplies, _to_supplies, _value_eth, _nonce)\n\n    # Assert that the ecrecover(address,signature) returns true.\n    recovered_to: address = self.ecrecoverSig(hash, _signature)\n    assert recovered_to == _to, \"Signer does not match signature.\"\n\n    # Store the nonce\n    self.noncesOf[msg.sender][_nonce] = True\n\n    # Update the balances\n    for i in range(BATCH_SIZE):\n        id: uint256 = _ids[i]\n        if _from_supplies[i] > 0:\n            self.balancesOf[_from][id] -= _from_supplies[i]\n            self.balancesOf[_to][id] += _from_supplies[i]\n        else:\n            self.balancesOf[_from][id] += _to_supplies[i]\n            self.balancesOf[_to][id] -= _to_supplies[i]\n\n    send(_to, msg.value)\n\n    log.TransferBatch(msg.sender, _from, _to, _ids, _from_supplies)\n    log.TransferBatch(msg.sender, _to, _from, _ids, _to_supplies)\n\n\n    if _to.is_contract:\n        returnValue: bytes32 = ERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _to, _ids, _from_supplies, _data)\n        assert returnValue == method_id(\"onERC1155BatchReceived(address,address,uint256,uint256,bytes)\", bytes32)\n    if _from.is_contract:\n        returnValue: bytes32 = ERC1155TokenReceiver(_from).onERC1155BatchReceived(msg.sender, _from, _ids, _to_supplies, _data)\n        assert returnValue == method_id(\"onERC1155BatchReceived(address,address,uint256,uint256,bytes)\", bytes32)\n\n\n\n@public\n@payable\ndef trade(_from: address, _to: address, _id: uint256, _from_supply: uint256, _to_supply: uint256, _value_eth: uint256, _nonce: uint256, _signature: bytes[65], _data: bytes[256]=\"\"):\n    \"\"\"\n    @notice Trade (atomically swap) tokens with tokens or eth.\n    @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if _from_supply > 0 and _to_supply > 0\n        MUST revert if _value_eth != msg.value\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_id` is lower than the respective amount in `positive or negative value` sent to the recipient.\n        MUST revert on any other error.\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n    @param _from            The from address (seller of eth, potential receiver of tokens).\n    @param _to              The receiver address (receiver of tokens).\n    @param _id              The id of the token\n    @param _from_supply     The change in value of token (for _from)\n    @param _to_supply       The change in value of token (for _to)\n    @param _value_eth       The value of the ETH sent to the _from address.\n    @param _nonce           The nonce.\n    @param _signature       The signature of the _to address.\n    @param _data    The data.\n    @return None\n    \"\"\"\n    # Assert the value of the transaction is less than the balance of A.\n    assert _from == msg.sender or (self.operators[_from])[msg.sender]\n    assert _to != ZERO_ADDRESS, \"Destination address must be non-zero.\"\n    assert self.noncesOf[_from][_nonce] == False, \"Nonce must be unused.\"\n    assert _value_eth == msg.value, \"Sender has not provided enough ether.\"\n    if _from_supply > 0:\n        assert _to_supply == 0\n        assert self.balancesOf[_from][_id] >= _from_supply\n    else:\n        assert _from_supply == 0\n        assert self.balancesOf[_to][_id] >= _to_supply\n\n    # Create hash from variables.\n    hash: bytes32 = self._getSingleHash(_from, _to, _id, _from_supply, _to_supply, _value_eth, _nonce)\n\n    # Assert that the ecrecover(address,signature) returns true.\n    recovered_to: address = self.ecrecoverSig(hash, _signature)\n    assert recovered_to == _to, \"Signer does not match signature.\"\n\n    # Store the nonce\n    self.noncesOf[msg.sender][_nonce] = True\n\n    # Update the balances\n    if _from_supply > 0:\n        self.balancesOf[_from][_id] -= _from_supply\n        self.balancesOf[_to][_id] += _from_supply\n    else:\n        self.balancesOf[_from][_id] += _to_supply\n        self.balancesOf[_to][_id] -= _to_supply\n\n    send(_to, msg.value)\n\n    log.TransferSingle(msg.sender, _from, _to, _id, _from_supply)\n    log.TransferSingle(msg.sender, _to, _from, _id, _to_supply)\n\n    if _to.is_contract:\n        returnValue: bytes32 = ERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _to, _id, _from_supply, _data)\n        assert returnValue == method_id(\"onERC1155BatchReceived(address,address,uint256,uint256,bytes)\", bytes32)\n    if _from.is_contract:\n        returnValue: bytes32 = ERC1155TokenReceiver(_from).onERC1155Received(msg.sender, _from, _id, _to_supply, _data)\n        assert returnValue == method_id(\"onERC1155BatchReceived(address,address,uint256,uint256,bytes)\", bytes32)\n",
  "sourcePath": "/Users/aristotelistriantafyllidis/Documents/agents-research/erc1155/contracts/erc1155.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.a01cdc8"
  },
  "networks": {
    "1583918911727": {
      "events": {
        "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62": {
          "name": "TransferSingle",
          "inputs": [
            {
              "type": "address",
              "name": "_operator",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_to",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "_id",
              "indexed": false
            },
            {
              "type": "uint256",
              "name": "_value",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62"
        },
        "0x514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8": {
          "name": "TransferBatch",
          "inputs": [
            {
              "type": "address",
              "name": "_operator",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_to",
              "indexed": true
            },
            {
              "type": "uint256[10]",
              "name": "_ids",
              "indexed": false
            },
            {
              "type": "uint256[10]",
              "name": "_values",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x514c24e4790d7c31a095a1688a73a01f28d936a9a85d806ba95970d8ee88efa8"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "name": "ApprovalForAll",
          "inputs": [
            {
              "type": "address",
              "name": "_owner",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_operator",
              "indexed": true
            },
            {
              "type": "bool",
              "name": "_approved",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31"
        },
        "0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b": {
          "name": "URI",
          "inputs": [
            {
              "type": "string",
              "name": "_value",
              "indexed": false
            },
            {
              "type": "uint256",
              "name": "_id",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b"
        }
      },
      "links": {},
      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",
      "transactionHash": "0x816b272ebd644b189a3addfbd429b0ea0fa7b2403cca3aa038bcd59f09d9c116"
    }
  },
  "schemaVersion": "3.0.19",
  "updatedAt": "2020-03-11T13:47:51.885Z",
  "networkType": "ethereum"
}