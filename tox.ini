; By default, testenvs are configured to:
; - don't skip dist (skipsdist = False)
; - don't skip the package installation (skip_install = False)
; - don't use source installation (usedevelop = False)
; where one of those steps is not necessary for the test,
; we set the associated flag (e.g. for linting we don't need
; the package installation).
[tox]
envlist = bandit, black, black-check, isort, isort-check, copyright_check, docs, flake8, liccheck, mypy, py{3.8,3.9,3.10}, dependencies_check, plugins_deps
isolated_build = True

[testenv]
basepython = python3
whitelist_externals = 
    /bin/sh
passenv = *
extras = all
deps = poetry
commands =
    poetry install --only testing,main,packages -E all
    poetry run pip install openapi-core==0.13.2
    poetry run python ./install_packages.py jsonschema
    poetry run python -m pip install file://{toxinidir}/plugins/aea-ledger-ethereum
    poetry run python -m pip install file://{toxinidir}/plugins/aea-ledger-cosmos
    poetry run python -m pip install file://{toxinidir}/plugins/aea-ledger-fetchai
    poetry run python -m pip install file://{toxinidir}/plugins/aea-cli-ipfs
    poetry run python ./install_packages.py black isort
    poetry run pytest -rfE --cov=aea --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing {posargs}

[testenv:py3.8]
basepython = python3.8

[testenv:py3.8-cov]
basepython = python3.8
usedevelop = True

[testenv:py3.9]
basepython = python3.9

[testenv:py3.10]
basepython = python3.10

[plugins]
commands =
    poetry install --only main,testing -E all
    poetry run python -m pip install file://{toxinidir}/plugins/aea-ledger-ethereum
    poetry run python -m pip install file://{toxinidir}/plugins/aea-ledger-cosmos
    poetry run python -m pip install file://{toxinidir}/plugins/aea-ledger-fetchai
    poetry run python -m pip install file://{toxinidir}/plugins/aea-cli-ipfs
    poetry run pytest -rfE plugins/aea-ledger-fetchai/tests --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_fetchai --cov-config=.coveragerc --suppress-no-test-exit-code {posargs}
    poetry run pytest -rfE plugins/aea-ledger-ethereum/tests --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum --cov-config=.coveragerc --suppress-no-test-exit-code {posargs}
    poetry run pytest -rfE plugins/aea-ledger-cosmos/tests --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_cosmos --cov-config=.coveragerc --suppress-no-test-exit-code {posargs}
    poetry run pytest -rfE plugins/aea-cli-ipfs/tests --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_cli_ipfs --cov-config=.coveragerc --suppress-no-test-exit-code {posargs}

[testenv:plugins-py3.8]
basepython = python3.8
commands = {[plugins]commands}

[testenv:plugins-py3.9]
basepython = python3.9
commands = {[plugins]commands}

[testenv:plugins-py3.10]
basepython = python3.10
commands = {[plugins]commands}

[testenv:plugins-py3.8-cov]
basepython = python3.8
usedevelop = True
commands = {[plugins]commands}

[testenv:bandit]
skipsdist = True
skip_install = True
commands = 
    poetry run python ./install_packages.py bandit
    make bandit

[testenv:check_plugins_code_consistency]
skipsdist = True
skip_install = True
whitelist_externals = 
    diff
commands = 
    make plugin-diffs

[testenv:check_go_code_consistency]
skipsdist = True
skip_install = True
whitelist_externals = 
    diff
commands = 
    make libp2p-diffs

[testenv:black]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py black
  make black

[testenv:black-check]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py black
  make black-check

[testenv:isort]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py isort
  make isort

[testenv:isort-check]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py isort
  make isort-check

[testenv:copyright_check]
skipsdist = True
skip_install = True
commands = 
  python {toxinidir}/scripts/check_copyright_notice.py --directory {toxinidir}

[testenv:hash_check]
skipsdist = True
usedevelop = True
commands = 
  poetry run python ./install_packages.py ipfshttpclient
  poetry run python {toxinidir}/scripts/generate_ipfs_hashes.py --check {posargs}

[testenv:package_version_checks]
skipsdist = True
usedevelop = True
deps =
commands = make check-package-versions-in-docs

[testenv:package_dependencies_checks]
skipsdist = True
usedevelop = True
deps =
commands = make check-packages

[testenv:docs]
skipsdist = True
skip_install = True
commands = 
  poetry install --only docs
  make docs

[testenv:docs-serve]
skipsdist = True
skip_install = True
commands = 
  poetry install --only docs
  poetry run mkdocs serve -a localhost:8080

[testenv:flake8]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py "flake8.*" pydocstyle darglint
  make flake8

[testenv:liccheck]
skipsdist = True
commands = 
  poetry install --only packages,main
  poetry run python ./install_packages.py liccheck
  make liccheck

[testenv:mypy]
skipsdist = True
skip_install = True
commands = 
    poetry install --only packages,main,testing,types
    poetry run python ./install_packages.py mypy
    make mypy

[testenv:pylint]
whitelist_externals = /bin/sh
skipsdist = True
commands =
    poetry run python ./install_packages.py pylint pytest gitpython
    # pytest gitpython installed for scripts and aea testing tools source code checks
    poetry run python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum
    poetry run python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-cosmos
    poetry run python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-fetchai
    poetry run python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
    make pylint

[testenv:safety]
skipsdist = True
skip_install = True
commands = 
    poetry run python ./install_packages.py safety
    make safety

[testenv:vulture]
skipsdist = True
skip_install = True
commands =
    poetry run python ./install_packages.py vulture
    make vulture

[testenv:check-doc-links]
skipsdist = True
usedevelop = True
deps =
commands = make check-doc-links

[testenv:check_api_docs]
skipsdist = True
usedevelop = True
commands =
    poetry run python ./install_packages.py pydoc-markdown
    poetry run {toxinidir}/scripts/generate_api_docs.py --check-clean

[testenv:check_generate_all_protocols]
skipsdist = True
usedevelop = True
setenv =
  PYTHONPATH = {toxinidir}
commands =
    poetry run pip install .[all]
    poetry run python ./install_packages.py black isort ipfshttpclient
    poetry run ./scripts/generate_all_protocols.py --no-bump --check-clean

[testenv:spell_check]
skipsdist = True
usedevelop = True
deps =
commands = {toxinidir}/scripts/spell-check.sh

[testenv:dependencies_check]
skipsdist = True
skip_install = True
commands =
	pip install {toxinidir}[all]
	pip uninstall aea  -y
	python {toxinidir}/scripts/check_imports_and_dependencies.py


[testenv:plugins_env]
skipsdist = True
skip_install = True
passenv = *
deps =
	.[all]
whitelist_externals = /bin/sh
commands =
	- /bin/sh -c "rm -fr ./*private_key.txt"
	{posargs}
	
